// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName              String
  lastName               String
  email                  String  @unique
  password               String
  phone                  String
  address                String
  over18                 Boolean
  parentGuardianName     String?
  parentGuardianPhone    String?
  parentGuardianEmail    String?
  guardianSignedConsent  String?
  photoRelease           Boolean
  dataPrivacy            Boolean
  emergencyContactName   String
  emergencyContactPhone  String
  emergencyContactEmail  String
  trainingCardUserNumber Int

  // Role Connection
  roleUserId Int      @default(1)
  roleUser   RoleUser @relation(fields: [roleUserId], references: [id])

  roleLevel Int @default(1)
  allowLevel4 Boolean @default(false)

  // Relationships
  userWorkshops     UserWorkshop[]
  equipmentbookings EquipmentBooking[]
  userMemberships UserMembership[] 
}

model RoleUser {
  id   Int    @id @default(autoincrement()) // Primary key with auto-increment
  name String @unique // Role name, e.g., "Admin" or "User"

  users User[] // Back-reference for the relation
}
model WorkshopPrerequisite {
  id             Int @id @default(autoincrement())
  workshopId     Int // The workshop that has prerequisites
  prerequisiteId Int // The workshop that is a prerequisite

  // Relationships
  workshop             Workshop @relation("WorkshopWithPrerequisite", fields: [workshopId], references: [id], onDelete: Cascade)
  prerequisiteWorkshop Workshop @relation("PrerequisiteWorkshop", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  // Ensure uniqueness - a workshop can only have the same prerequisite once
  @@unique([workshopId, prerequisiteId])
}

model Workshop {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String
  price              Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  location           String
  capacity           Int
  type               String // "workshop" or "orientation"
  imageUrl           String?
  cancellationPolicy String   @default("Can't make it? Email info@makerspaceyk.com. Full refunds are only available if canceled within 48 hours of registration.")

  // Relationships
  occurrences    WorkshopOccurrence[] // Relationship to occurrences
  userWorkshops  UserWorkshop[] // Many-to-many relationship with User

  // Prerequisite relationships
  prerequisiteFor WorkshopPrerequisite[] @relation("PrerequisiteWorkshop")
  prerequisites   WorkshopPrerequisite[] @relation("WorkshopWithPrerequisite")
}

model WorkshopOccurrence {
  id           Int       @id @default(autoincrement())
  workshopId   Int
  startDate    DateTime
  endDate      DateTime
  startDatePST DateTime?
  endDatePST   DateTime?
  status       String    @default("active") // "open", "closed", "cancelled"
  connectId    Int? // For workshop continuation tracking

  // Relationships
  workshop     Workshop        @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  userWorkshops UserWorkshop[]
  equipmentSlots EquipmentSlot[] // This ensures each workshop occurrence can have multiple equipment slots.

  @@unique([workshopId, id], name: "workshopOccurrence_workshop_id")
}

model Equipment {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float
  availability Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String?
slots       EquipmentSlot[]
  bookings    EquipmentBooking[]
}

model EquipmentSlot {
  id           Int      @id @default(autoincrement())
  equipmentId  Int
  equipment    Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  startTime    DateTime
  endTime      DateTime
  isAvailable  Boolean  @default(true)
  isBooked     Boolean  @default(false)

  // Link to Workshops
  workshopOccurrenceId Int?
  workshopOccurrence   WorkshopOccurrence? @relation(fields: [workshopOccurrenceId], references: [id], onDelete: SetNull)

  bookings     EquipmentBooking[] @relation("EquipmentSlotToBooking")
}


model EquipmentBooking {
  id          Int    @id @default(autoincrement())
  userId      Int
  equipmentId Int
  slotId      Int
  status      String @default("pending")

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment   Equipment     @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  slot        EquipmentSlot @relation(fields: [slotId], references: [id], onDelete: Cascade, name: "EquipmentSlotToBooking") 

  @@unique([slotId]) // Prevents double booking of slots
}

model UserWorkshop {
  id           Int      @id @default(autoincrement())
  userId       Int
  workshopId   Int
  occurrenceId Int
  result       String   @default("passed")
  date         DateTime @default(now())

  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  workshop     Workshop           @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  occurrence   WorkshopOccurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)

  @@unique([userId, occurrenceId]) // Prevents duplicate registrations for the same occurrence
}


model MembershipPlan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  price       Float
  feature     Json
  accessHours Json // Example: {"start": "09:00", "end": "18:00"}

  type String // "monthly", "one-time", "limited", "24/7"

  userMemberships UserMembership[] 
}

model UserMembership {
  id               Int             @id @default(autoincrement())
  userId           Int             @unique
  membershipPlanId Int
  date             DateTime @default(now())
  nextPaymentDate  DateTime?

  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipPlan   MembershipPlan  @relation(fields: [membershipPlanId], references: [id], onDelete: Cascade)

  @@unique([userId, membershipPlanId], name: "uniqueUserMembershipPlan")
}