// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName              String
  lastName               String
  email                  String  @unique
  password               String
  phone                  String
  address                String
  over18                 Boolean
  parentGuardianName     String?
  parentGuardianPhone    String?
  parentGuardianEmail    String?
  guardianSignedConsent  String?
  photoRelease           Boolean
  dataPrivacy            Boolean
  emergencyContactName   String
  emergencyContactPhone  String
  emergencyContactEmail  String
  trainingCardUserNumber Int

  // roleUser  Int @default(1)
  roleUserId             Int      @default(1) // Default to 1
  roleUser               RoleUser @relation(fields: [roleUserId], references: [id]) // Relation to RoleUser
  roleLevel Int @default(1)
}

model MembershipPlan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  price       Float // Float is used for numeric values like 35.0
  feature     Json // JSON type for structured data like descriptions
}

model RoleUser {
  id   Int    @id @default(autoincrement()) // Primary key with auto-increment
  name String @unique // Role name, e.g., "Admin" or "User"

  users User[] // Back-reference for the relation
}
model Workshop {
  id              Int      @id @default(autoincrement()) // Unique ID for each workshop
  name            String   // Workshop title/name
  description     String   // Short description of the workshop
  price           Float    // Price of the workshop (0.0 for free)
  createdAt       DateTime @default(now()) // Date when the workshop was added
  updatedAt       DateTime @updatedAt // Automatically updates when modified
  eventDate       DateTime // Date and time when the workshop is scheduled
  location        String   // Where the workshop is held (e.g., "Makerspace YK")
  capacity        Int      // Max number of participants
  status String @default("upcoming") // Possible values: "upcoming", "ongoing", "completed"
}