// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName              String
  lastName               String
  email                  String  @unique
  password               String
  phone                  String
  address                String
  over18                 Boolean
  parentGuardianName     String?
  parentGuardianPhone    String?
  parentGuardianEmail    String?
  guardianSignedConsent  String?
  photoRelease           Boolean
  dataPrivacy            Boolean
  emergencyContactName   String
  emergencyContactPhone  String
  emergencyContactEmail  String
  trainingCardUserNumber Int

  // Role Connection
  roleUserId Int      @default(1)
  roleUser   RoleUser @relation(fields: [roleUserId], references: [id])

  roleLevel Int @default(1)
  allowLevel4 Boolean @default(false)

  // Relationships
  userWorkshops     UserWorkshop[]
  equipmentbookings EquipmentBooking[]
  userMemberships UserMembership[] 
}

model RoleUser {
  id   Int    @id @default(autoincrement()) // Primary key with auto-increment
  name String @unique // Role name, e.g., "Admin" or "User"

  users User[] // Back-reference for the relation
}

model Workshop {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String
  price              Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  location           String
  capacity           Int
  type               String // "workshop" or "orientation"
  imageUrl           String?
  cancellationPolicy String   @default("Can't make it? Email info@makerspaceyk.com. Full refunds are only available if canceled within 48 hours of registration.")

  // Add relationships
  occurrences   WorkshopOccurrence[] // Relationship to occurrences
  userWorkshops UserWorkshop[] // Many-to-many relationship with User

  // Add new relationships for prerequisites
  prerequisiteFor WorkshopPrerequisite[] @relation("PrerequisiteWorkshop")
  prerequisites   WorkshopPrerequisite[] @relation("WorkshopWithPrerequisite")
  equipmentSlots EquipmentSlot[]

}

// Create the new WorkshopPrerequisite model
model WorkshopPrerequisite {
  id             Int @id @default(autoincrement())
  workshopId     Int // The workshop that has prerequisites
  prerequisiteId Int // The workshop that is a prerequisite

  // Relationships
  workshop             Workshop @relation("WorkshopWithPrerequisite", fields: [workshopId], references: [id], onDelete: Cascade)
  prerequisiteWorkshop Workshop @relation("PrerequisiteWorkshop", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  // Ensure uniqueness - a workshop can only have the same prerequisite once
  @@unique([workshopId, prerequisiteId])
}

model WorkshopOccurrence {
  id           Int       @id @default(autoincrement())
  workshopId   Int
  startDate    DateTime
  endDate      DateTime
  startDatePST DateTime?
  endDatePST   DateTime?
  status       String    @default("active") // "open", "closed", "cancelled"
  equipmentId  Int?

  workshop      Workshop       @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  userWorkshops UserWorkshop[]

  @@unique([workshopId, id], name: "workshopOccurrence_workshop_id")
}

// prerequisites
// - orientations or workshops (many to many)
// - at least level 1 member
// - not necessarily paid subscription as it only gives perks (discounts, etc)
// 
// users (many to many)
//   user - orientation - result (Passed, Failed) (pass by default for workshop), date
//
// type: orientation or workshop

model UserWorkshop {
  id           Int      @id @default(autoincrement())
  userId       Int
  workshopId   Int
  occurrenceId Int
  result       String   @default("passed")
  date         DateTime @default(now())

  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  workshop   Workshop           @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  occurrence WorkshopOccurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)

  @@unique([userId, occurrenceId]) // Ensure a user cannot register for the same occurrence twice
}

model Equipment {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String
  price        Float    @default(0.0)
  availability Boolean  @default(true) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  imageUrl     String?  // New field to store equipment images (nullable)

  bookings EquipmentBooking[] 
  slots    EquipmentSlot[] 
}

model EquipmentSlot {
  id          Int      @id @default(autoincrement())
  equipmentId Int
  startTime   DateTime 
  endTime     DateTime
  isBooked    Boolean  @default(false)

  equipment        Equipment         @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  EquipmentBooking EquipmentBooking?
  workshopId       Int? 
  workshop         Workshop? @relation(fields: [workshopId], references: [id]) 
}
model EquipmentBooking {
  id          Int    @id @default(autoincrement())
  userId      Int
  equipmentId Int
  slotId      Int    @unique
  status      String @default("pending")

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment Equipment     @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  slot      EquipmentSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
}

model MembershipPlan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  price       Float
  feature     Json
  accessHours Json // Example: {"start": "09:00", "end": "18:00"}

  type String // "monthly", "one-time", "limited", "24/7"

  userMemberships UserMembership[] 
}

model UserMembership {
  id               Int             @id @default(autoincrement())
  userId           Int             @unique
  membershipPlanId Int

  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipPlan   MembershipPlan  @relation(fields: [membershipPlanId], references: [id], onDelete: Cascade)

  @@unique([userId, membershipPlanId], name: "uniqueUserMembershipPlan")
}